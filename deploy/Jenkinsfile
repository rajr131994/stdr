#!/usr/bin/env groovy
import groovy.json.JsonSlurperClassic

def deployToServers(hostnames, folder, sshUser, sshPass, sudoUser, sudoPass, healthUrl) {
   def parms = 'RAILS_ENV=$RAILS_ENV RAILS_MASTER_KEY="$RAILS_MASTER_KEY"'
   def commands = """#! /bin/bash
if [ -f '/opt/blackline/rails/$folder/tmp/pids/resque.pid' ]
then
   pid=\$(cat /opt/blackline/rails/$folder/tmp/pids/resque.pid)
   echo "Killing running resque instance with PID \$pid"
   kill -QUIT \$pid
   sleep 10
fi
if [ -f '/opt/blackline/rails/$folder/tmp/pids/resque-pool.pid' ]
then
   pid=\$(cat /opt/blackline/rails/$folder/tmp/pids/resque-pool.pid)
   echo "Killing running resque pool instance with PID \$pid"
   kill -QUIT \$pid
   sleep 10
fi
rsync -r --delete --exclude={'env','log','shared','config/puma.rb','.bundle/config','deploy.sh','restart.sh'} /tmp/$folder/ /opt/blackline/rails/$folder/
cd /opt/blackline/rails/$folder
export \$(cat env | grep -v '#' | xargs)
echo "RAILS_ENV:     \$RAILS_ENV"
echo "DATABASE_HOST: \$DATABASE_HOST"
echo "GEM_PATH:      \$GEM_PATH"
echo "Running bundler install --without development test"
$parms bundler install --without development test
echo "Running bundle exec rake app:update:bin"
$parms bundle exec rake app:update:bin
echo "Running bundle exec rails db:create"
$parms bundle exec rails db:create
echo "Running bundle exec rails db:migrate"
$parms bundle exec rails db:migrate
echo "Ensuring log directory exists"
[ -d log ] || mkdir log
echo "Ensuring log/resque-pool.stdout.log file exists"
[ -f log/resque-pool.stdout.log ] || touch log/resque-pool.stdout.log
echo "Ensuring log/resque-pool.stderr.log file exists"
[ -f log/resque-pool.stderr.log ] || touch log/resque-pool.stderr.log
echo "Running bundle exec rake resque:scheduler"
$parms PIDFILE=tmp/pids/resque.pid BACKGROUND=yes bundle exec rake resque:scheduler &
echo "Running bundle exec resque-pool --daemon --environment production"
$parms bundle exec resque-pool --daemon --environment production
exit
"""
   writeFile(file: "./$folder/deploy.sh", text: commands.replace('\r\n', '\n'), encoding: 'UTF-8')
   for (String hostname : hostnames) {
      def user = sshUser.substring(sshUser.indexOf('\\') + 1)
      commands = """#! /bin/bash
echo -e '$sudoPass\\n' | sudo -S systemctl restart sap-puma
echo -e '$sudoPass\\n' | sudo -S rm -rf /tmp/$folder
sleep 10
result=\$(curl -k $healthUrl 2>/dev/null) || true
if [ -n "\$result" -a "\$result" == 'success' ]
then
   echo 'Deployment to server $hostname was successful'
   exit 0
else
   echo 'Deployment to server $hostname was NOT successful'
   exit 1
fi
"""
      writeFile(file: "./$folder/restart.sh", text: commands.replace('\r\n', '\n'), encoding: 'UTF-8')
      try {
         print(">>>>>> Pushing source files to target server $hostname via SFTP")
         sh """
sshpass -p '$sshPass' sftp -q -o StrictHostKeyChecking=no $user@$hostname << EOF
cd /tmp
mkdir $folder
put -r ./$folder
quit
EOF
"""
         print("<<<<<< Pushed source files to target server $hostname via SFTP")
      } catch (err) {
         print("ERROR: Caught exception pushing source files to target server $hostname via SFTP: $err")
         currentBuild.result = 'UNSTABLE'
         continue
      }

      try {
         print(">>>>>> Running rails commands on target server $hostname via SSH")
         sh """
         sshpass -p '$sshPass' ssh -q -o StrictHostKeyChecking=no $user@$hostname "chmod +x /tmp/$folder/deploy.sh && chmod +x /tmp/$folder/restart.sh && /bin/bash /tmp/$folder/deploy.sh"
      """
         print("<<<<<< Ran rails commands successfully on target server $hostname via SSH")
      } catch (err) {
         print("ERROR: Caught exception running rails commands on target server $hostname via SSH: $err")
         currentBuild.result = 'UNSTABLE'
         continue
      }

      user = sudoUser.substring(sudoUser.indexOf('\\') + 1)
      try {
         print(">>>>>> Restarting sap-puma on target server $hostname via SSH")
         sh """
            sshpass -p '$sudoPass' ssh -q -o StrictHostKeyChecking=no $user@$hostname "/bin/bash /tmp/$folder/restart.sh"
         """
         print("<<<<<< Restarted sap-puma successfully on target server $hostname via SSH")
      } catch (err) {
         print("ERROR: Caught exception restarting sap-puma on target server $hostname via SSH: $err")
         currentBuild.result = 'UNSTABLE'
      }
   }
}

pipeline {
   agent {
      label 'docker'
   }

   environment {
      // directories
      def DIR_SRC_ROOT = "$WORKSPACE/source"
      def DIR_BUILD_UTILS = "$DIR_SRC_ROOT/bl-build-utils"
      def DIR_BUILD_UTILS_COMMON = "$DIR_BUILD_UTILS/common"

      // global docker variables
      def CARGO_BASE_PATH = "$GLOBAL_CONTAINER_REGISTRY_CARGO_PATH"
      def JQ_IMG = "$GLOBAL_IMG_BUILD_JQ"
      def GIT_IMG = "$GLOBAL_IMG_BUILD_GIT"
      def PY_IMG = "$GLOBAL_IMG_BUILD_PY_REQUESTS"

      // local docker variables
      def SSH_IMG = 'bl-build-ssh:20.04.24.00'

      def SSH_CREDENTIALS_ID = ''
      def FOLDER_NAME = 'services.connectors.sap'
      def SOURCE_DIR = "$WORKSPACE/$FOLDER_NAME"
      def PORT_NUMBER = 3004
      def HEALTH_URL = "https://localhost:$PORT_NUMBER/health_check"
      def SERVICE_NAME = 'services.connectors.sap'
      def PARENT_SERVICE = 'fcs'
      def SNYK_SCAN = true
      def SNYK_VERBOSE = false
   }

   options {
      timeout(time: 60, unit: 'MINUTES')
      timestamps()
   }

   stages {
      stage('Set build name') {
         steps {
            script {
               print('>>> Validating parameters')
               assert env.Environment && env.Environment != '': 'ERROR: Environment parameter is required'
               def envTypeArray = EnvironmentType.split('-')
               def envTypeCode = envTypeArray[0].trim()
               assert envTypeCode in ['C', 'D', 'L', 'T', 'X']: "ERROR: Invalid value '$EnvironmentType' provided for EnvironmentType parameter. Higher environments must be deployed to using the Deploy_SAP_Connector_DE Jenkins job."
               assert TargetBranch && TargetBranch != '': 'ERROR: TargetBranch parameter is required'
               assert TargetBranch in ['dev', 'test']: "ERROR: Invalid value '$TargetBranch' provided for TargetBranch parameter"
               assert EmailList && EmailList != '': 'ERROR: EmailList parameter is required'
               print('<<< Validated parameters')
               // e.g.: #1 dev => US
               currentBuild.displayName = (CommitHash == null || CommitHash == '') ? "$currentBuild.displayName $TargetBranch => $env.Environment" : "$currentBuild.displayName $CommitHash => $env.Environment"
            }
         }
      }

      stage('Setup') {
         parallel {
            stage('Get SSH credentials') {
               steps {
                  script {
                     def envTypeArray = EnvironmentType.split('-')
                     def envTypeCode = envTypeArray[0].trim()
                     def envType = envTypeArray[1].trim()
                     print(">>> Getting SSH credentials for $envType environment $env.Environment")
                     switch (envTypeCode) {
                        case 'C': case 'D':
                           SSH_CREDENTIALS_ID = '122ac5aa-564e-4906-9fc4-873079eb1971'
                           break

                        case 'L': case 'T': case 'X':
                           SSH_CREDENTIALS_ID = 'beaa119c-bf93-44d0-913b-da86a1d84221'
                           break
                     }

                     assert SSH_CREDENTIALS_ID != '': "ERROR: Unable to retrieve SSH credentials for $envType environment $env.Environment"
                     print(">>>>>> SSH_CREDENTIALS_ID => $SSH_CREDENTIALS_ID")
                     print("<<< Retrieved SSH credentials for $envType environment $env.Environment")
                  }
               }
            }

            stage('Pull') {
               agent {
                  docker {
                     image "$CARGO_BASE_PATH/$GIT_IMG"
                     reuseNode true
                  }
               }
               environment {
                  def STASH_CRED = credentials('218a60ea-58d4-40bc-a7f1-30a6578bf4da')
                  def GIT_URL = "https://$STASH_CRED@stash.blackline.corp/scm/link/services.connectors.s4hana_public_cloud"
               }
               steps {
                  script {
                     print('>>> Pull stage starting')
                     if (fileExists("$WORKSPACE/$FOLDER_NAME")) {
                        sh """rm -rf $WORKSPACE/$FOLDER_NAME"""
                     }

                     def branch = (CommitHash != null && CommitHash != '') ? "master" : "$TargetBranch"
                     print(">>>>>> Cloning branch $branch of $GIT_URL into folder $FOLDER_NAME")
                     sh """git clone -b $branch $GIT_URL $FOLDER_NAME"""

                     assert fileExists("$WORKSPACE/$FOLDER_NAME"): "ERROR: Failed to clone $FOLDER_NAME repository"
                     if (CommitHash != null && CommitHash != '') {
                        dir(FOLDER_NAME) {
                           sh """git checkout $CommitHash"""
                        }
                     }

                     dir(DIR_SRC_ROOT) {
                        if (fileExists(DIR_BUILD_UTILS)) {
                           print('>>>>>> Removing old bl-build-utils directory')
                           sh """rm -rf $DIR_BUILD_UTILS"""
                           print('<<<<<< Removed bl-build-utils directory')
                        }

                        print('>>>>>> Cloning bl-build-utils repository')
                        sh """git clone -q https://$STASH_CRED@stash.blackline.corp/scm/devops/bl-build-utils.git"""
                        assert fileExists(DIR_BUILD_UTILS): 'ERROR: Failed to clone bl-build-utils repository'
                        print('<<<<<< Cloned bl-build-utils repository')
                     }

                     print('<<< Pull stage ending')
                  }
               }
            }
         }
      }

      stage('Get Consul URL') {
         environment {
            def CREEL_URL = credentials('2f71c58e-908d-4aeb-ab96-0196d474f781')
            def CREEL_API_KEY = credentials('c53a980a-ce9d-4d2a-bb40-5f5decbdd463')
         }
         agent {
            docker {
               image "$CARGO_BASE_PATH/$PY_IMG"
               reuseNode true
            }
         }
         steps {
            script {
               print('>>> Retrieving consul URL')
               print(">>>>>> Retrieving zone for target environment $env.Environment")
               dir(DIR_BUILD_UTILS_COMMON) {
                  ENV_ZONE = sh(returnStdout: true, script: """
python -c 'from creel.creel_environment import CreelEnvironment
print(CreelEnvironment.get_env_zone(environment="${env.Environment.toLowerCase()}"))'
            """).trim()
                  assert ENV_ZONE != null && ENV_ZONE != '' && !ENV_ZONE.contains('False:'): "ERROR: Failed to retrieve zone for target environment $env.Environment => $ENV_ZONE"
                  print(">>>>>>>>> ENV_ZONE => $ENV_ZONE")
                  print("<<<<<< Retrieved zone for target environment $env.Environment")

                  print(">>>>>> Retrieving consul URL for zone $ENV_ZONE")
                  def configResponseRaw = sh(returnStdout: true, script: """
python -c 'import json
from creel.creel_config import CreelConfig
res = CreelConfig.get_config_item(config_type="service_discovery", config_item="consul")
print(json.dumps(res))'
            """).trim()
                  assert configResponseRaw != null && configResponseRaw != 'None' && !configResponseRaw.contains('False:'): "ERROR: Failed to retrieve consul URL for zone $ENV_ZONE => $configResponseRaw"
                  def configResponse = new groovy.json.JsonSlurperClassic().parseText(configResponseRaw)
                  assert configResponse != null: "ERROR: Failed to parse consul URL information response from Creel for zone $ENV_ZONE"
                  assert configResponse.endpoints != null: "ERROR: Consul URL information response from Creel does not contain endpoints data"
                  assert configResponse.endpoints."$ENV_ZONE" != null: "ERROR: Consul URL information response from Creel does not contain data for zone $ENV_ZONE"
                  CONSUL_URL = configResponse.endpoints."$ENV_ZONE"
                  assert CONSUL_URL != null && CONSUL_URL != '': "ERROR: Failed to retrieve consul URL for zone $ENV_ZONE"
               }
               print(">>>>>>>>> CONSUL_URL => $CONSUL_URL")
               print("<<<<<< Retrieved consul URL for zone $ENV_ZONE")
               print('<<< Retrieved consul URL')
            }
         }
      }

      stage('Get target hostnames') {
         agent {
            docker {
               image "$CARGO_BASE_PATH/$JQ_IMG"
               reuseNode true
            }
         }
         steps {
            script {
               print(">>> Retrieving hostnames for target environment $env.Environment")
               dir(DIR_BUILD_UTILS_COMMON) {
                  def dcLowerCase = DataCenter.toLowerCase()
				   if (dcLowerCase == 'las' && ENV_ZONE == 'nonprodzone'){
					   dcLowerCase = 'lasdev' 
				   }
                     
                  print(">>>>>> Retrieving target hostnames from consul URL $CONSUL_URL")
                  HOSTNAME_LIST = sh(returnStdout: true, script: """
              curl -s -G $CONSUL_URL/v1/catalog/service/ip-connector-sap?dc="$dcLowerCase" | \
              jq -r '[.[] | select((.Datacenter == "$dcLowerCase") and (.ServiceTags[] | startswith("$env.Environment"))) | .Node] | \
              map(tostring) | join(",")'
            """).trim()

                  assert HOSTNAME_LIST != null && HOSTNAME_LIST != '' && HOSTNAME_LIST != 'null': "ERROR: Unable to retrieve hostnames for target environment $env.Environment"
                  print(">>>>>>>>> HOSTNAME_LIST => $HOSTNAME_LIST")
                  print("<<<<<< Retrieved target hostnames from consul URL $CONSUL_URL")
                  print("<<< Retrieved hostnames for target environment $env.Environment")
               }
            }
         }
      }

      stage('Snyk Security Scan') {
         environment {
            def BUILD_JOB_NAME = 'Build_Service_Handler_Connectors'
         }
         steps {
            print('>>> Triggering Snyk scan')

            build job: BUILD_JOB_NAME,
              parameters: [
                string(name: 'ServiceName', value: SERVICE_NAME),
                string(name: 'ParentService', value: PARENT_SERVICE),
                booleanParam(name: 'RunScan', value: SNYK_SCAN),
                booleanParam(name: 'ScanVerbose', value: SNYK_VERBOSE)
              ]
         }
      }

      stage('Deploy') {
         agent {
            docker {
               image "$CARGO_BASE_PATH/$SSH_IMG"
               args '-u root:root'
               reuseNode true
            }
         }
         environment {
            def SSH_CREDS = credentials("$SSH_CREDENTIALS_ID")
            def SUDO_CREDS = credentials('1a45f9fc-2795-4e31-93ab-f341926317eb')
         }
         steps {
            script {
               print('>>> Deployment starting')

               print('>>>>>> Deleting deploy folder since it is used for deployment')
               sh "rm -rf $FOLDER_NAME/deploy"
               print('<<<<<< Deleted deploy folder since it is used for deployment')

               print('>>>>>> Deleting .git folder since it is used for source code management')
               sh "rm -rf $FOLDER_NAME/.git"
               print('<<<<<< Deleted .git folder since it is used for source code management')

               hostnames = HOSTNAME_LIST.split(',')
               deployToServers(hostnames, FOLDER_NAME, SSH_CREDS_USR, SSH_CREDS_PSW, SUDO_CREDS_USR, SUDO_CREDS_PSW, HEALTH_URL)
               print('<<< Deployment complete')
            }
         }
      }
   }

   post {
      always {
         print('>>> Initiating Post-Run Cleanup')
         cleanWs()
      }

      success {
         print('>>> Sending email for successful run')
         mail to: EmailList,
           subject: 'SUCCESS: BlackLine Link SAP Connector Deployment',
           body: "Console output can be viewed here: ${BUILD_URL}consoleFull"
      }

      failure {
         print('>>> Sending email for failed run')
         mail to: EmailList,
           subject: 'FAILED: BlackLine Link SAP Connector Deployment',
           body: "Please review console oputput here: ${BUILD_URL}consoleFull"
      }
   }

}
