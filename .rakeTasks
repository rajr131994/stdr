<?xml version="1.0" encoding="UTF-8"?>
<Settings><!--This file was automatically generated by Ruby plugin.
You are allowed to: 
1. Remove rake task
2. Add existing rake tasks
To add existing rake tasks automatically delete this file and reload the project.
--><RakeGroup description="" fullCmd="" taksId="rake"><RakeTask description="List versions of all Rails frameworks and the environment" fullCmd="about" taksId="about" /><RakeGroup description="" fullCmd="" taksId="action_mailbox"><RakeGroup description="" fullCmd="" taksId="ingress"><RakeTask description="Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" fullCmd="action_mailbox:ingress:exim" taksId="exim" /><RakeTask description="Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" fullCmd="action_mailbox:ingress:postfix" taksId="postfix" /><RakeTask description="Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" fullCmd="action_mailbox:ingress:qmail" taksId="qmail" /></RakeGroup><RakeTask description="Installs Action Mailbox and its dependencies" fullCmd="action_mailbox:install" taksId="install" /><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from action_mailbox to application" fullCmd="action_mailbox:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="action_text"><RakeTask description="Copy over the migration, stylesheet, and JavaScript files" fullCmd="action_text:install" taksId="install" /><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from action_text to application" fullCmd="action_text:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="active_storage"><RakeTask description="Copy over the migration needed to the application" fullCmd="active_storage:install" taksId="install" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="apartment"><RakeTask description="Create all tenants" fullCmd="apartment:create" taksId="create" /><RakeTask description="Drop all tenants" fullCmd="apartment:drop" taksId="drop" /><RakeTask description="Migrate all tenants" fullCmd="apartment:migrate" taksId="migrate" /><RakeGroup description="" fullCmd="" taksId="migrate"><RakeTask description="Runs the &quot;down&quot; for a given migration VERSION across all tenants" fullCmd="apartment:migrate:down" taksId="down" /><RakeTask description="Rolls back the tenant one migration and re migrate up (options: STEP=x, VERSION=x)" fullCmd="apartment:migrate:redo" taksId="redo" /><RakeTask description="Runs the &quot;up&quot; for a given migration VERSION across all tenants" fullCmd="apartment:migrate:up" taksId="up" /></RakeGroup><RakeTask description="Rolls the migration back to the previous version (specify steps w/ STEP=n) across all tenants" fullCmd="apartment:rollback" taksId="rollback" /><RakeTask description="Seed all tenants" fullCmd="apartment:seed" taksId="seed" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="app"><RakeTask description="Applies the template supplied by LOCATION=(/path/to/template) or URL" fullCmd="app:template" taksId="template" /><RakeTask description="Update configs and some other initially generated files (or use just update:configs or update:bin)" fullCmd="app:update" taksId="update" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="assets"><RakeTask description="Remove old compiled assets" fullCmd="assets:clean[keep]" taksId="clean[keep]" /><RakeTask description="Remove compiled assets" fullCmd="assets:clobber" taksId="clobber" /><RakeTask description="Load asset compile environment" fullCmd="assets:environment" taksId="environment" /><RakeTask description="Compile all the assets named in config.assets.precompile" fullCmd="assets:precompile" taksId="precompile" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="cache_digests"><RakeTask description="Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" fullCmd="cache_digests:dependencies" taksId="dependencies" /><RakeTask description="Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" fullCmd="cache_digests:nested_dependencies" taksId="nested_dependencies" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="db"><RakeTask description="Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" fullCmd="db:create" taksId="create" /><RakeTask description="Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" fullCmd="db:drop" taksId="drop" /><RakeGroup description="" fullCmd="" taksId="environment"><RakeTask description="Set the environment value for the database" fullCmd="db:environment:set" taksId="set" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="fixtures"><RakeTask description="Loads fixtures into the current environment's database" fullCmd="db:fixtures:load" taksId="load" /></RakeGroup><RakeTask description="Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" fullCmd="db:migrate" taksId="migrate" /><RakeGroup description="" fullCmd="" taksId="migrate"><RakeTask description="Runs the &quot;down&quot; for a given migration VERSION" fullCmd="db:migrate:down" taksId="down" /><RakeTask description="Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" fullCmd="db:migrate:redo" taksId="redo" /><RakeTask description="Display status of migrations" fullCmd="db:migrate:status" taksId="status" /><RakeTask description="Runs the &quot;up&quot; for a given migration VERSION" fullCmd="db:migrate:up" taksId="up" /></RakeGroup><RakeTask description="Runs setup if database does not exist, or runs migrations if it does" fullCmd="db:prepare" taksId="prepare" /><RakeTask description="Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" fullCmd="db:reset" taksId="reset" /><RakeTask description="Rolls the schema back to the previous version (specify steps w/ STEP=n)" fullCmd="db:rollback" taksId="rollback" /><RakeGroup description="" fullCmd="" taksId="schema"><RakeGroup description="" fullCmd="" taksId="cache"><RakeTask description="Clears a db/schema_cache.yml file" fullCmd="db:schema:cache:clear" taksId="clear" /><RakeTask description="Creates a db/schema_cache.yml file" fullCmd="db:schema:cache:dump" taksId="dump" /></RakeGroup><RakeTask description="Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" fullCmd="db:schema:dump" taksId="dump" /><RakeTask description="Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" fullCmd="db:schema:load" taksId="load" /></RakeGroup><RakeTask description="Loads the seed data from db/seeds.rb" fullCmd="db:seed" taksId="seed" /><RakeGroup description="" fullCmd="" taksId="seed"><RakeTask description="Truncates tables of each database for current environment and loads the seeds" fullCmd="db:seed:replant" taksId="replant" /></RakeGroup><RakeTask description="Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" fullCmd="db:setup" taksId="setup" /><RakeGroup description="" fullCmd="" taksId="structure"><RakeTask description="Dumps the database structure to db/structure.sql" fullCmd="db:structure:dump" taksId="dump" /><RakeTask description="Recreates the databases from the structure.sql file" fullCmd="db:structure:load" taksId="load" /></RakeGroup><RakeTask description="Retrieves the current schema version number" fullCmd="db:version" taksId="version" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="log"><RakeTask description="Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" fullCmd="log:clear" taksId="clear" /></RakeGroup><RakeTask description="Prints out your Rack middleware stack" fullCmd="middleware" taksId="middleware" /><RakeGroup description="" fullCmd="" taksId="resque"><RakeGroup description="" fullCmd="" taksId="failures"><RakeTask description="Sort the 'failed' queue for the redis_multi_queue failure backend" fullCmd="resque:failures:sort" taksId="sort" /></RakeGroup><RakeTask description="Launch a pool of resque workers" fullCmd="resque:pool" taksId="pool" /><RakeTask description="Start Resque Scheduler" fullCmd="resque:scheduler" taksId="scheduler" /><RakeTask description="Start a Resque worker" fullCmd="resque:work" taksId="work" /><RakeTask description="Start multiple Resque workers" fullCmd="resque:workers" taksId="workers" /></RakeGroup><RakeTask description="Restart app by touching tmp/restart.txt" fullCmd="restart" taksId="restart" /><RakeGroup description="" fullCmd="" taksId="scp"><RakeTask description="SCP connection" fullCmd="scp:connections" taksId="connections" /></RakeGroup><RakeTask description="Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" fullCmd="secret" taksId="secret" /><RakeTask description="Run all specs in spec directory (excluding plugin specs)" fullCmd="spec" taksId="spec" /><RakeGroup description="" fullCmd="" taksId="spec"><RakeTask description="Run the code examples in spec/controllers" fullCmd="spec:controllers" taksId="controllers" /><RakeTask description="Run the code examples in spec/models" fullCmd="spec:models" taksId="models" /></RakeGroup><RakeTask description="Report code statistics (KLOCs, etc) from the application or engine" fullCmd="stats" taksId="stats" /><RakeTask description="Runs all tests in test folder except system ones" fullCmd="test" taksId="test" /><RakeGroup description="" fullCmd="" taksId="test"><RakeTask description="Runs all tests, including system tests" fullCmd="test:all" taksId="all" /><RakeTask description="Run tests quickly, but also reset db" fullCmd="test:db" taksId="db" /><RakeTask description="Run system tests only" fullCmd="test:system" taksId="system" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="time"><RakeTask description="List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" fullCmd="time:zones[country_or_offset]" taksId="zones[country_or_offset]" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="tmp"><RakeTask description="Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" fullCmd="tmp:clear" taksId="clear" /><RakeTask description="Creates tmp directories for cache, sockets, and pids" fullCmd="tmp:create" taksId="create" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="yarn"><RakeTask description="Install all JavaScript dependencies as specified via Yarn" fullCmd="yarn:install" taksId="install" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="zeitwerk"><RakeTask description="Checks project structure for Zeitwerk compatibility" fullCmd="zeitwerk:check" taksId="check" /></RakeGroup></RakeGroup></Settings>
